<?xml version="1.0" encoding="utf-8" ?>
<docs xml:space="preserve">
	<doc for="Match">
		<summary>
			Allows creation custom value matchers that can be used on setups and verification,
			completely replacing the built-in <see cref="It"/> class with your own argument
			matching rules.
		</summary>
	</doc>
	<doc for="Match{T}">
		<summary>
			Allows creation custom value matchers that can be used on setups and verification,
			completely replacing the built-in <see cref="It"/> class with your own argument
			matching rules.
		</summary>
		<typeparam name="T">Type of the value to match.</typeparam>
		<remarks>
			The argument matching is used to determine whether a concrete
			invocation in the mock matches a given setup. This
			matching mechanism is fully extensible.
		</remarks>
		<example>
			Creating a custom matcher is straightforward. You just need to create a method
			that returns an instance of <see cref="Match{T}"/> with your matching condition:
			<code>
				public Order IsBigOrder()
				{
					return new Match&lt;Order&gt;(o => o.GrandTotal &gt;= 5000);
				}
			</code>
			The <see cref="Match{T}"/> class is implicitly convertible to the return type,
			which must be the type expected by the mock setup invocation:
			<code>
				mock.Setup(m => m.Submit(IsBigOrder()).Throws&lt;UnauthorizedAccessException&gt;();
			</code>
			By returning the appropriate type from the custom matcher method, the compiler
			is satisfied, but at runtime Moq knows that the return value was a matcher and
			evaluates your predicate with the actual value passed-in.
			<para>
				Another example might be a case where you want to match a lists of orders
				that contains a particular one. You might create matcher like the following:
			</para>
			<code>
				public static class Orders
				{
					public static IEnumerable&lt;Order&gt; Contains(Order order)
					{
						return new Match&lt;IEnumerable&lt;Order&gt;&gt;(orders => orders.Contains(order));
					}
				}
			</code>
			Now we can invoke this static method instead of an argument in an
			invocation:
			<code>
				var order = new Order { ... };
				var mock = new Mock&lt;IRepository&lt;Order&gt;&gt;();

				mock.Setup(x =&gt; x.Save(Orders.Contains(order)))
					 .Throws&lt;ArgumentException&gt;();
			</code>
		</example>
	</doc>
	<doc for="Match{T}.ctor">
		<summary>
			Initializes the match with the condition that
			will be checked in order to match invocation
			values.
		</summary>
	</doc>
	<doc for="Match{T}.Convert">
		<summary>
			If the target type to match is an interface, the implicit cast will not work and
			you need to explicitly convert the matcher to the target type to satisfy the compiler.
		</summary>
		<remarks>
			For more information about this well-known .NET limitation, see
			https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=318122
		</remarks>
	</doc>
	<doc for="Match{T}.operator">
		<summary>
			Satisfies the compiler when the matcher is used
			to specify an argument value.
		</summary>
	</doc>
</docs>